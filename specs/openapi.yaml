openapi: 3.0.3
info:
  title: FoodX SDK API
  description: |
    API specification for the FoodX SDK, a modular blockchain-based decentralized 
    platform for food traceability and supply chain management.
  version: 0.1.0
  contact:
    name: FoodX Team
    email: info@foodx-sdk.example
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.foodx-sdk.example/v1
    description: Production server
  - url: https://staging-api.foodx-sdk.example/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development server

tags:
  - name: Authentication
    description: Authentication and API key management
  - name: Products
    description: Product tracking and management
  - name: Transactions
    description: Supply chain transaction operations
  - name: Compliance
    description: Compliance and reporting operations
  - name: Ecosystem
    description: Ecosystem integrations and extensions

paths:
  /auth/api-keys:
    get:
      summary: List API keys
      description: Get all API keys for the current tenant
      tags:
        - Authentication
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    
    post:
      summary: Create API key
      description: Create a new API key
      tags:
        - Authentication
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - scopes
              properties:
                name:
                  type: string
                  description: Human-readable name for the key
                  example: "Mobile App Key"
                scopes:
                  type: array
                  description: Permission scopes for this key
                  items:
                    type: string
                    example: "products:read"
                expiresAt:
                  type: integer
                  format: int64
                  description: Expiration timestamp (in milliseconds since epoch)
                  example: 1735689600000
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/api-keys/{keyId}:
    delete:
      summary: Revoke API key
      description: Revoke an existing API key
      tags:
        - Authentication
      security:
        - ApiKeyAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          description: ID of the API key to revoke
          schema:
            type: string
      responses:
        '204':
          description: API key revoked successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /products:
    get:
      summary: List products
      description: Get a list of products with optional filtering
      tags:
        - Products
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Maximum number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: createdAfter
          in: query
          description: Filter by creation date (milliseconds since epoch)
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Filter by product status
          schema:
            type: string
            enum:
              - active
              - archived
              - recalled
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    
    post:
      summary: Create product
      description: Create a new product
      tags:
        - Products
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /products/{productId}:
    get:
      summary: Get product
      description: Get a product by ID
      tags:
        - Products
      security:
        - ApiKeyAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update product
      description: Update an existing product
      tags:
        - Products
      security:
        - ApiKeyAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /transactions:
    get:
      summary: List transactions
      description: Get a list of supply chain transactions with optional filtering
      tags:
        - Transactions
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Maximum number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: productId
          in: query
          description: Filter by product ID
          schema:
            type: string
        - name: fromLocation
          in: query
          description: Filter by source location
          schema:
            type: string
        - name: toLocation
          in: query
          description: Filter by destination location
          schema:
            type: string
        - name: startTime
          in: query
          description: Filter by start time (milliseconds since epoch)
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Filter by end time (milliseconds since epoch)
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    
    post:
      summary: Create transaction
      description: Record a new supply chain transaction
      tags:
        - Transactions
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInput'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /transactions/{transactionId}:
    get:
      summary: Get transaction
      description: Get a transaction by ID
      tags:
        - Transactions
      security:
        - ApiKeyAuth: []
      parameters:
        - name: transactionId
          in: path
          required: true
          description: ID of the transaction to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /compliance/exports:
    post:
      summary: Export data
      description: Export data in the specified format
      tags:
        - Compliance
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - dataType
                - format
              properties:
                dataType:
                  type: string
                  description: Type of data to export
                  example: "products"
                format:
                  type: string
                  description: Export format
                  enum:
                    - csv
                    - json
                    - excel
                    - pdf
                    - xml
                options:
                  type: object
                  description: Export options
                  properties:
                    filters:
                      type: object
                      description: Filters to apply to the exported data
                    fields:
                      type: array
                      description: Fields to include in the export
                      items:
                        type: string
                    timeRange:
                      type: object
                      properties:
                        startTime:
                          type: integer
                          format: int64
                          description: Start timestamp
                        endTime:
                          type: integer
                          format: int64
                          description: End timestamp
                    includeSignature:
                      type: boolean
                      description: Whether to include a digital signature
                    includeMetadata:
                      type: boolean
                      description: Whether to include metadata
      responses:
        '200':
          description: Export successful
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /compliance/data-types:
    get:
      summary: Get available data types
      description: Get a list of data types available for export
      tags:
        - Compliance
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of data types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "products"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /compliance/provenance/{resourceType}/{resourceId}:
    get:
      summary: Get data provenance
      description: Get the data provenance/chain of custody for a resource
      tags:
        - Compliance
      security:
        - ApiKeyAuth: []
      parameters:
        - name: resourceType
          in: path
          required: true
          description: Type of resource
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        '200':
          description: Provenance information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProvenanceEntry'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /ecosystem/webhooks:
    get:
      summary: List webhooks
      description: Get all webhooks
      tags:
        - Ecosystem
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    
    post:
      summary: Create webhook
      description: Create a new webhook
      tags:
        - Ecosystem
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookInput'
      responses:
        '201':
          description: Webhook created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  
  schemas:
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the API key
        key:
          type: string
          description: The actual key value (only returned when initially created)
        name:
          type: string
          description: Human-readable name for the key
        type:
          type: string
          enum:
            - primary
            - secondary
            - restricted
            - temporary
          description: Type of the API key
        status:
          type: string
          enum:
            - active
            - expired
            - revoked
          description: Current status of the key
        scopes:
          type: array
          description: Permission scopes granted to this key
          items:
            type: string
        rateLimit:
          type: integer
          description: Maximum requests per minute allowed for this key
        createdAt:
          type: integer
          format: int64
          description: When the key was created
        lastUsedAt:
          type: integer
          format: int64
          description: When the key was last used
        expiresAt:
          type: integer
          format: int64
          description: When the key expires (null for no expiration)
        createdBy:
          type: string
          description: User who created the key
      required:
        - id
        - name
        - type
        - status
        - scopes
        - createdAt
        - createdBy
    
    Product:
      type: object
      properties:
        id:
          type: string
          description: Unique product identifier
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        sku:
          type: string
          description: Stock keeping unit
        category:
          type: string
          description: Product category
        status:
          type: string
          enum:
            - active
            - archived
            - recalled
          description: Current product status
        metadata:
          type: object
          description: Additional product metadata
        blockchain:
          type: object
          description: Blockchain-specific information
          properties:
            transactionId:
              type: string
              description: Blockchain transaction ID
            blockNumber:
              type: integer
              description: Block number where the transaction was included
            chainId:
              type: string
              description: Blockchain network identifier
        createdAt:
          type: integer
          format: int64
          description: When the product was created
        createdBy:
          type: string
          description: User who created the product
        updatedAt:
          type: integer
          format: int64
          description: When the product was last updated
      required:
        - id
        - name
        - status
        - createdAt
        - createdBy
    
    ProductInput:
      type: object
      properties:
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        sku:
          type: string
          description: Stock keeping unit
        category:
          type: string
          description: Product category
        status:
          type: string
          enum:
            - active
            - archived
            - recalled
          description: Product status
        metadata:
          type: object
          description: Additional product metadata
      required:
        - name
        - status

    Transaction:
      type: object
      properties:
        id:
          type: string
          description: Unique transaction identifier
        type:
          type: string
          description: Transaction type
          enum:
            - creation
            - movement
            - transformation
            - inspection
            - certification
        productId:
          type: string
          description: Related product ID
        fromLocation:
          type: string
          description: Source location
        toLocation:
          type: string
          description: Destination location
        timestamp:
          type: integer
          format: int64
          description: When the transaction occurred
        metadata:
          type: object
          description: Additional transaction metadata
        blockchain:
          type: object
          description: Blockchain-specific information
          properties:
            transactionId:
              type: string
              description: Blockchain transaction ID
            blockNumber:
              type: integer
              description: Block number where the transaction was included
            chainId:
              type: string
              description: Blockchain network identifier
        createdAt:
          type: integer
          format: int64
          description: When the transaction was recorded
        createdBy:
          type: string
          description: User who recorded the transaction
      required:
        - id
        - type
        - timestamp
        - createdAt
        - createdBy
    
    TransactionInput:
      type: object
      properties:
        type:
          type: string
          description: Transaction type
          enum:
            - creation
            - movement
            - transformation
            - inspection
            - certification
        productId:
          type: string
          description: Related product ID
        fromLocation:
          type: string
          description: Source location
        toLocation:
          type: string
          description: Destination location
        timestamp:
          type: integer
          format: int64
          description: When the transaction occurred
        metadata:
          type: object
          description: Additional transaction metadata
      required:
        - type
        - productId
        - timestamp

    ProvenanceEntry:
      type: object
      properties:
        id:
          type: string
          description: Entry identifier
        resourceType:
          type: string
          description: Type of resource
        resourceId:
          type: string
          description: Resource identifier
        action:
          type: string
          description: Action performed
        actor:
          type: object
          properties:
            id:
              type: string
              description: Actor identifier
            type:
              type: string
              description: Actor type
            name:
              type: string
              description: Actor name
        timestamp:
          type: integer
          format: int64
          description: When the action occurred
        previousState:
          type: object
          description: Resource state before the action
        currentState:
          type: object
          description: Resource state after the action
        metadata:
          type: object
          description: Additional metadata
        blockchain:
          type: object
          description: Blockchain-specific information
      required:
        - id
        - resourceType
        - resourceId
        - action
        - actor
        - timestamp

    Webhook:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique webhook identifier
        name:
          type: string
          description: Human-readable name
        url:
          type: string
          format: uri
          description: URL to deliver the webhook to
        events:
          type: array
          description: Event types this webhook subscribes to
          items:
            type: string
            enum:
              - product.created
              - product.updated
              - transaction.created
              - transaction.confirmed
              - transaction.failed
        status:
          type: string
          enum:
            - active
            - paused
            - error
          description: Current status
        includeResource:
          type: boolean
          description: Whether to include the full resource in the webhook payload
        createdAt:
          type: integer
          format: int64
          description: When the webhook was created
        createdBy:
          type: string
          description: User who created the webhook
        headers:
          type: object
          description: Custom HTTP headers to include with webhook requests
        filter:
          type: object
          description: Filter for which events should trigger this webhook
      required:
        - id
        - name
        - url
        - events
        - status
        - includeResource
        - createdAt
        - createdBy
    
    WebhookInput:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name
        url:
          type: string
          format: uri
          description: URL to deliver the webhook to
        events:
          type: array
          description: Event types this webhook subscribes to
          items:
            type: string
            enum:
              - product.created
              - product.updated
              - transaction.created
              - transaction.confirmed
              - transaction.failed
        includeResource:
          type: boolean
          description: Whether to include the full resource in the webhook payload
          default: true
        secret:
          type: string
          description: Secret used to sign webhook payloads
        headers:
          type: object
          description: Custom HTTP headers to include with webhook requests
        filter:
          type: object
          description: Filter for which events should trigger this webhook
      required:
        - name
        - url
        - events

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page
        total:
          type: integer
          description: Total number of items
        pages:
          type: integer
          description: Total number of pages
      required:
        - page
        - limit
        - total
        - pages
    
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
      required:
        - code
        - message

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 